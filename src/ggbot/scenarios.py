from ggbot.btree import *
from .actions import *
from .conversation import ScenarioHandler


__all__ = [
    "MISMATCH_SCENARIO",
    "HELLO_SCENARIO",
    "DIALOG_TEST_SCENARIO",
    "DOTA_GATHER_SCENARIO",
    "WHAT_DO_YOU_THINK",
    "HANDLERS",
]


MISMATCH_SCENARIO = sequence(
    # add_reaction_to_request_message('‚ùì')
)


WHAT_DO_YOU_THINK = random_one_of(
    reply_to_message("–∫–æ–Ω–µ—á–Ω–æ"),
    reply_to_message("–∞ —Ç—ã –∫–∞–∫ –¥—É–º–∞–ª"),
    reply_to_message("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ"),
    reply_to_message("—Ä–∞–∑—É–º–µ–µ—Ç—Å—è"),
    reply_to_message("–∞ –∫–∞–∫ –∂–µ"),
    reply_to_message("–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ"),
    reply_to_message("—Å–∞–º–æ —Å–æ–±–æ–π"),
    reply_to_message("–Ω—É –¥–∞"),
    reply_to_message("–≤–æ–∑–º–æ–∂–Ω–æ"),
    reply_to_message("—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏"),
    reply_to_message("–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ"),
    reply_to_message("—à–∞–Ω—Å—ã –µ—Å—Ç—å"),
    reply_to_message("–ø—Ä–æ–≤–µ—Ä—è—Ç—å –±—ã –Ω–µ —Å—Ç–∞–ª"),
    reply_to_message("—Å–æ–º–Ω–µ–≤–∞—é—Å—å"),
    reply_to_message("–¥–∞ –Ω–µ—Ç"),
    reply_to_message("—Ö–∑"),
    reply_to_message("—Ç—É—Ç —è –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ —É–≤–µ—Ä–µ–Ω"),
    reply_to_message("—è –±—ã –Ω–µ –±—ã–ª —Ç–∞–∫ –≤ —ç—Ç–æ —É–≤–µ—Ä–µ–Ω"),
    reply_to_message("–Ω—É –Ω–µ—Ç"),
    reply_to_message("—Ç–æ—á–Ω–æ –Ω–µ—Ç"),
    reply_to_message("—Ç—ã —á—Ç–æ, —à—É—Ç–∏—à—å?"),
    reply_to_message("–∫–æ–Ω–µ—á–Ω–æ –∂–µ –Ω–µ—Ç"),
    reply_to_message("—ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"),
    reply_to_message("—á—Ç–æ –∑–∞ –≤–æ–ø—Ä–æ—Å"),
    reply_to_message("–Ω–∞ —ç—Ç–æ —è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ —Å—Ç–∞–Ω—É"),
)


HELLO_SCENARIO = random_one_of(
    reply_to_message("–¥–æ—Ä–æ—É"),
    reply_to_message("–¥–∞—Ä–æ–≤"),
    reply_to_message("–ø—Ä–∏–≤–µ—Ç"),
    reply_to_message("–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é"),
    selector(
        sequence(
            check_condition("{{ 6 < now().hour <= 12 }}"),
            reply_to_message("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ @{{user.name}}"),
        ),
        sequence(
            check_condition("{{ 12 < now().hour <= 18 }}"),
            reply_to_message("–î–æ–±—Ä—ã–π –¥–µ–Ω—å"),
        ),
        sequence(
            check_condition("{{ 18 < now().hour <= 22 }}"),
            reply_to_message("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"),
        ),
        sequence(
            check_condition("{{ (22 < now().hour <= 24) or (now().hour <= 6) }}"),
            reply_to_message("–î–æ–±—Ä–æ–π –Ω–æ—á–∏ <@{{ user.member.id }}>"),
        ),
        reply_to_message("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"),
    ),
)


HELLO_1_SCENARIO = sequence(
    random_one_of(
        reply_to_message("–¥–æ—Ä–æ—É, –∫–∞–∫ –¥–µ–ª–∞?"),
        reply_to_message("–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –æ–Ω–æ? "),
        reply_to_message("–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∫–∞–∫ –±–æ–¥—Ä–æ—Å—Ç—å –¥—É—Ö–∞?"),
        reply_to_message("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—Ç–µ?"),
    ),
    selector(
        sequence(
            wait_for_message_from_user(10),
            random_one_of(
                reply_to_message("–±—ã–≤–∞–µ—Ç"),
                reply_to_message("—à—Ç–æ—à"),
                reply_to_message("–∑–¥–æ—Ä–æ–≤–æ"),
                reply_to_message("–Ω–æ —ç—Ç–æ –∂–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ"),
                reply_to_message("—Å–æ—á—É—Å—Ç–≤—É—é"),
                reply_to_message("–≤–µ–∑–µ—Ç —Ç–µ–±–µ"),
                reply_to_message("–ø—Ä–∏–∫–æ–ª—å–Ω–æ"),
                reply_to_message("–æ–∫"),
                reply_to_message("—Ç–∞–∫–æ–µ"),
                add_reaction_to_request_message("üëç"),
            ),
        ),
        random_one_of(
            reply_to_message("–Ω–µ —Ö–æ—á–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å - –Ω—É –∏ —Ö–µ—Ä —Å —Ç–æ–±–æ–π"),
            reply_to_message("–∫–∞–∑–∞–ª–æ—Å—å –±—ã, –ø—Ä–æ—Å—Ç–æ–π –±—ã–ª –≤–æ–ø—Ä–æ—Å"),
            reply_to_message("—Ö–æ—Ä–æ—à–æ, –º–æ–∂–µ—à—å –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å, —è —ç—Ç–æ –∑–∞–ø–æ–º–Ω–∏–ª"),
            reply_to_message("–Ω–µ—É–∂–µ–ª–∏ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å?"),
        ),
    ),
)


DOTA_GATHER_SCENARIO = sequence(
    send_message_to_channel("(—ç—Ç–æ —Ç–µ—Å—Ç) –ö—Ç–æ –ø–æ–π–¥–µ—Ç –≤ –¥–æ—Ç—É? (20 —Å–µ–∫—É–Ω–¥ –∂–¥—É)"),
    repeat_until_timer_expires(
        25,
        selector(
            sequence(
                wait_for_message_from_channel(10),
                # add_reaction_to_request_message('‚úîÔ∏è'),
                set_var(
                    "gathered",
                    "{% if gathered is defined %}{{ gathered + [message.author.name] }}{% else %}{{ [message.author.name] }}{% endif %}",
                ),
                edit_last_answer(
                    "(—ç—Ç–æ —Ç–µ—Å—Ç) –ö—Ç–æ –ø–æ–π–¥–µ—Ç –≤ –¥–æ—Ç—É? (20 —Å–µ–∫—É–Ω–¥ –∂–¥—É) `{{ gathered }}`"
                ),
            ),
            send_message_to_channel("Anyone?"),
        ),
    ),
    send_message_to_channel("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ"),
)


DIALOG_TEST_SCENARIO = sequence(
    reply_to_message("–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, –¥–∞ –∏–ª–∏ –Ω–µ—Ç?"),
    retry_until_success(
        2,
        sequence(
            sequence(
                wait_for_message_from_user_with_intents(["yes", "no"], seconds=5),
                selector(
                    sequence(message_intent_is("yes"), reply_to_message("–û–∫")),
                    sequence(message_intent_is("no"), reply_to_message("–ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç")),
                    always_fail(
                        random_one_of(
                            reply_to_message("–ò —á—Ç–æ —Ç—ã —ç—Ç–∏–º —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å?"),
                            reply_to_message('"–î–∞" –∏–ª–∏ "–Ω–µ—Ç", —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ —á—Ç–æ –ª–∏?'),
                        )
                    ),
                ),
            )
        ),
    ),
)

HANDLERS = {
    "mismatch": ScenarioHandler(MISMATCH_SCENARIO),
    "intent-hello": ScenarioHandler(HELLO_SCENARIO),
    "intent-what-do-you-think": ScenarioHandler(WHAT_DO_YOU_THINK),
    "intent-dialog-test": ScenarioHandler(DIALOG_TEST_SCENARIO),
    "intent-gather-test": ScenarioHandler(DOTA_GATHER_SCENARIO),
}
